name: Build

on:
  push:
    branches:
        - '**'

jobs:
  native-build:
    name: 'Native build'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        submodules: true
    - name: Check for cache
      id: check-cache
      uses: actions/cache@main
      with:
        key: gcc-15.1.0-1
        lookup-only: true
        path: |
          /tmp/x86_64-linux-gnu.tar.xz
          /tmp/x86_64-linux-gnu.tar.xz.sha256
    - name: Build OBGGCC
      if: ${{ steps.check-cache.outputs.cache-hit != 'true' }}
      run: |
        bash './build.sh' 'native'
    - name: Generate tarball
      if: ${{ steps.check-cache.outputs.cache-hit != 'true' }}
      run: |
        declare tarball_filename='/tmp/x86_64-linux-gnu.tar.xz'
        tar --directory='/tmp' --create --file=- 'obggcc' | xz --threads='0' --extreme --memlimit-compress='100%' --compress -9 > "${tarball_filename}"
        sha256sum "${tarball_filename}" | sed 's|/tmp/||' > "${tarball_filename}.sha256"
    - name: Upload artifact
      if: ${{ steps.check-cache.outputs.cache-hit != 'true' }}
      uses: actions/upload-artifact@main
      with:
        name: native-toolchain
        if-no-files-found: error
        path: |
          /tmp/x86_64-linux-gnu.tar.xz
          /tmp/x86_64-linux-gnu.tar.xz.sha256
    - name: Cache artifact
      if: ${{ steps.check-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache@main
      with:
        key: gcc-15.1.0-1
        path: |
          /tmp/x86_64-linux-gnu.tar.xz
          /tmp/x86_64-linux-gnu.tar.xz.sha256
  
  cross-build:
    name: 'Cross build'
    needs: native-build
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        target: [
          # Linux (musl)
          'aarch64-unknown-linux-musl',
          'x86_64-unknown-linux-musl',
          'arm-unknown-linux-musleabihf',
          'i386-unknown-linux-musl',
          'armv7l-unknown-linux-musleabihf',
          
          # Linux (glibc)
          'x86_64-unknown-linux-gnu',
          'i386-unknown-linux-gnu',
          'arm-unknown-linux-gnueabihf',
          'aarch64-unknown-linux-gnu',
          
          # FreeBSD
          'x86_64-unknown-freebsd',
          'aarch64-unknown-freebsd',
          'i386-unknown-freebsd',
         
          # NetBSD
          'i386-unknown-netbsdelf',
          'x86_64-unknown-netbsd',
          
          # Android
          'x86_64-unknown-linux-android',
          'i686-unknown-linux-android',
          'arm-unknown-linux-androideabi',
          'aarch64-unknown-linux-android'
        ]
    steps:
    - uses: actions/checkout@main
      with:
        submodules: true
    - name: Restore from cache
      uses: actions/cache@main
      with:
        key: gcc-15.1.0-1
        fail-on-cache-miss: true
        path: |
          /tmp/x86_64-linux-gnu.tar.xz
          /tmp/x86_64-linux-gnu.tar.xz.sha256
    - name: Setup toolchain
      run: |
        tar --directory='/tmp' --extract --file='/tmp/x86_64-linux-gnu.tar.xz'
        mv '/tmp/obggcc' '/tmp/obggcc-toolchain'
    - name: Cross-compile OBGGCC to ${{ matrix.target }}
      run: |
        source './tools/setup_toolchain.sh'
        
        if [[ '${{ matrix.target }}' == *'-linux-musl'* ]]; then
            declare -r RAIDEN_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Raiden/releases/latest')")"
            declare -r RAIDEN_TARBALL='/tmp/toolchain.tar.xz'
            declare -r RAIDEN_URL="https://github.com/AmanoTeam/Raiden/releases/download/${RAIDEN_TAG}/x86_64-unknown-linux-gnu.tar.xz"
            
            curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${RAIDEN_URL}" --output "${RAIDEN_TARBALL}"
            tar --directory="$(dirname "${RAIDEN_TARBALL}")" --extract --file="${RAIDEN_TARBALL}"
            
            export RAIDEN_HOME='/tmp/raiden'
            export PATH="${RAIDEN_HOME}/bin:${PATH}"
            
            source "${RAIDEN_HOME}/usr/local/share/raiden/autotools/${{ matrix.target }}.sh"
        elif [[ '${{ matrix.target }}' == *'-linux-gnu'* ]]; then
            # declare -r OBGGCC_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/obggcc/releases/latest')")"
            # declare -r OBGGCC_TARBALL='/tmp/toolchain.tar.xz'
            # declare -r OBGGCC_URL="https://github.com/AmanoTeam/obggcc/releases/download/${OBGGCC_TAG}/x86_64-unknown-linux-gnu.tar.xz"
            
            # curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${OBGGCC_URL}" --output "${OBGGCC_TARBALL}"
            # tar --directory="$(dirname "${OBGGCC_TARBALL}")" --extract --file="${OBGGCC_TARBALL}"
            
            export OBGGCC_HOME='/tmp/obggcc-toolchain'
            export PATH="${OBGGCC_HOME}/bin:${PATH}"
            
            source "${OBGGCC_HOME}/usr/local/share/obggcc/autotools/${{ matrix.target }}.sh"
        elif [[ '${{ matrix.target }}' == *'-freebsd' ]]; then
            declare -r LOKI_TAG="$(jq --raw-output '.tag_name' <<< "$(curl  --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Loki/releases/latest')")"
            declare -r LOKI_TARBALL='/tmp/toolchain.tar.xz'
            declare -r LOKI_URL="https://github.com/AmanoTeam/Loki/releases/download/${LOKI_TAG}/x86_64-unknown-linux-gnu.tar.xz"
            
            curl --silent --connect-timeout '10' --retry '15' --retry-all-errors --fail --location --url "${LOKI_URL}" --output "${LOKI_TARBALL}"
            tar --directory="$(dirname "${LOKI_TARBALL}")" --extract --file="${LOKI_TARBALL}"
            
            export LOKI_HOME='/tmp/loki'
            export PATH="${LOKI_HOME}/bin:${PATH}"
            
            source "${LOKI_HOME}/usr/local/share/loki/autotools/${{ matrix.target }}.sh"
        elif [[ '${{ matrix.target }}' == *'-netbsd'* ]]; then
            declare -r DAKINI_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Dakini/releases/latest')")"
            declare -r DAKINI_TARBALL='/tmp/toolchain.tar.xz'
            declare -r DAKINI_URL="https://github.com/AmanoTeam/Dakini/releases/download/${DAKINI_TAG}/x86_64-unknown-linux-gnu.tar.xz"
            
            curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${DAKINI_URL}" --output "${DAKINI_TARBALL}"
            tar --directory="$(dirname "${DAKINI_TARBALL}")" --extract --file="${DAKINI_TARBALL}"
            
            export DAKINI_HOME='/tmp/dakini'
            export PATH="${DAKINI_HOME}/bin:${PATH}"
            
            source "${DAKINI_HOME}/usr/local/share/dakini/autotools/${{ matrix.target }}.sh"
        elif [[ '${{ matrix.target }}' == *'-android'* ]]; then
            declare -r PINO_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Pino/releases/latest')")"
            declare -r PINO_TARBALL='/tmp/toolchain.tar.xz'
            declare -r PINO_URL="https://github.com/AmanoTeam/Pino/releases/download/${PINO_TAG}/x86_64-unknown-linux-gnu.tar.xz"
            
            curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${PINO_URL}" --output "${PINO_TARBALL}"
            tar --directory="$(dirname "${PINO_TARBALL}")" --extract --file="${PINO_TARBALL}"
            
            export PINO_HOME='/tmp/pino'
            export PATH="${PINO_HOME}/bin:${PATH}"
            
            source "${PINO_HOME}/usr/local/share/pino/autotools/${{ matrix.target }}.sh"
        fi
        
        bash './build.sh' '${{ matrix.target }}'
    - name: Generate tarball
      run: |
        declare tarball_filename='/tmp/${{ matrix.target }}.tar.xz'
        tar --directory='/tmp' --create --file=- 'obggcc' | xz --threads='0' --extreme --memlimit-compress='100%' --compress -9 > "${tarball_filename}"
        sha256sum "${tarball_filename}" | sed 's|/tmp/||' > "${tarball_filename}.sha256"
    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.target }}
        if-no-files-found: error
        path: |
          /tmp/${{ matrix.target }}.tar.xz
          /tmp/${{ matrix.target }}.tar.xz.sha256
