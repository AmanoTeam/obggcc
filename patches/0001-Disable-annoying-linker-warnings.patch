From c44405fea7e6f6b65cbcad18074031d3ab51b8bc Mon Sep 17 00:00:00 2001
From: Kartatz <105828205+Kartatz@users.noreply.github.com>
Date: Fri, 31 Jan 2025 04:06:38 +0100
Subject: [PATCH] Disable annoying linker warnings

---
 bfd/elf.c     | 3 ++-
 bfd/elflink.c | 9 ++++++---
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/bfd/elf.c b/bfd/elf.c
index f85f79e..3826aa8 100644
--- a/bfd/elf.c
+++ b/bfd/elf.c
@@ -6864,10 +6864,11 @@ error: %pB has a LOAD segment with RWX permissions"),
 					  abfd);
 		      return false;
 		    }
-
+/*
 		  _bfd_error_handler (_("\
 warning: %pB has a LOAD segment with RWX permissions"),
 				      abfd);
+*/
 		  if (warned_tls)
 		    break;
 
diff --git a/bfd/elflink.c b/bfd/elflink.c
index 336bcbf..074a982 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -3315,13 +3315,14 @@ _bfd_elf_adjust_dynamic_symbol (struct elf_link_hash_entry *h, void *data)
      are probably going to create a COPY reloc for an empty object.
      This case can arise when a shared object is built with assembly
      code, and the assembly code fails to set the symbol type.  */
+/*
   if (h->size == 0
       && h->type == STT_NOTYPE
       && !h->needs_plt)
     _bfd_error_handler
       (_("warning: type and size of dynamic symbol `%s' are not defined"),
        h->root.root.string);
-
+*/
   if (! (*bed->elf_backend_adjust_dynamic_symbol) (eif->info, h))
     {
       eif->failed = true;
@@ -4986,11 +4987,12 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)
 	     symbol is ever referenced in relocations.  */
 	  shindex = elf_elfheader (abfd)->e_shstrndx;
 	  name = bfd_elf_string_from_elf_section (abfd, shindex, hdr->sh_name);
+/*
 	  _bfd_error_handler (_("%pB: %s local symbol at index %lu"
 				" (>= sh_info of %lu)"),
 			      abfd, name, (long) (isym - isymbuf + extsymoff),
 			      (long) extsymoff);
-
+*/
 	  /* Dynamic object relocations are not processed by ld, so
 	     ld won't run into the problem mentioned above.  */
 	  if (dynamic)
@@ -7450,12 +7452,13 @@ error: %s: is triggering the generation of an executable stack because it does n
 					      bfd_get_filename (emptyobj));
 			  return false;
 			}
-
+/*
 		      _bfd_error_handler (_("\
 warning: %s: missing .note.GNU-stack section implies executable stack"),
 					  bfd_get_filename (emptyobj));
 		      _bfd_error_handler (_("\
 NOTE: This behaviour is deprecated and will be removed in a future version of the linker"));
+*/
 		    }
 		}
 	    }
-- 
2.36.6

